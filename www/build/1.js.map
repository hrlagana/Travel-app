{"version":3,"sources":["../../src/pages/reset-password/reset-password.module.ts","../../src/validators/email.ts","../../src/pages/reset-password/reset-password.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAyC;AACO;AACK;AAUrD;IAAA;IAAsC,CAAC;IAA1B,uBAAuB;QARnC,uEAAQ,CAAC;YACR,YAAY,EAAE;gBACZ,0EAAiB;aAClB;YACD,OAAO,EAAE;gBACP,sEAAe,CAAC,QAAQ,CAAC,0EAAiB,CAAC;aAC5C;SACF,CAAC;OACW,uBAAuB,CAAG;IAAD,8BAAC;CAAA;AAAH;;;;;;;;;ACVpC;AAAA;IAAA;IAaA,CAAC;IAZU,sBAAO,GAAd,UAAe,OAAoB;QAC/B,IAAM,GAAG,GAAG,4DAA4D;aACnE,IAAI,CACL,OAAO,CAAC,KAAK,CACZ,CAAC;QACN,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YACN,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC;QACD,MAAM,CAAC;YACH,YAAY,EAAE,IAAI;SACrB,CAAC;IACN,CAAC;IACL,qBAAC;AAAD,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;ACfyC;AACwD;AAC1C;AACC;AACD;AACZ;AAQ5C;IAIE,2BAAmB,OAAsB,EAAS,WAA8B,EAAS,SAA0B,EAAS,YAA0B,EAAE,WAAwB;QAA7J,YAAO,GAAP,OAAO,CAAe;QAAS,gBAAW,GAAX,WAAW,CAAmB;QAAS,cAAS,GAAT,SAAS,CAAiB;QAAS,iBAAY,GAAZ,YAAY,CAAc;QACpJ,IAAI,CAAC,iBAAiB,GAAG,WAAW,CAAC,KAAK,CAAC;YACzC,KAAK,EAAE;gBACL,EAAE,EAAE,kEAAU,CAAC,OAAO,CAAC,CAAC,kEAAU,CAAC,QAAQ,EAAE,yEAAc,CAAC,OAAO,CAAC,CAAC;aACtE;SACF,CAAC,CAAC;IACL,CAAC;IAED,0CAAc,GAAd;QACE,OAAO,CAAC,GAAG,CAAC,kCAAkC,CAAC,CAAC;IAClD,CAAC;IAED,yCAAa,GAAb;QAAA,iBAsCC;QArCC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC,CAAC;YAClC,OAAO,CAAC,GAAG,CACT,2CAAyC,IAAI,CAAC,iBAAiB,CAAC,KAAO,CACxE,CAAC;QACJ,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAM,KAAK,GAAW,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,KAAK,CAAC;YAEzD,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,cAAI;gBAC9C,KAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC;oBAC1B,IAAM,KAAK,GAAU,KAAI,CAAC,SAAS,CAAC,MAAM,CAAC;wBACzC,OAAO,EAAE,mDAAmD;wBAC5D,OAAO,EAAE;4BACP;gCACE,IAAI,EAAE,IAAI;gCACV,IAAI,EAAE,QAAQ;gCACd,OAAO,EAAE;oCACP,KAAI,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC;gCACrB,CAAC;6BACF;yBACF;qBACF,CAAC,CAAC;oBAEH,KAAK,CAAC,OAAO,EAAE,CAAC;gBAClB,CAAC,CAAC,CAAC;YACL,CAAC,EAAE,eAAK;gBACN,IAAM,UAAU,GAAG,KAAI,CAAC,SAAS,CAAC,MAAM,CAAC;oBACvC,OAAO,EAAE,KAAK,CAAC,OAAO;oBACtB,OAAO,EAAE,CAAC,EAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,QAAQ,EAAC,CAAC;iBACxC,CAAC,CAAC;gBAEH,KAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;gBACvB,UAAU,CAAC,OAAO,EAAE,CAAC;YACvB,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC;YACzC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;QACzB,CAAC;IACH,CAAC;IAtDU,iBAAiB;QAJ7B,wEAAS,CAAC;YACT,QAAQ,EAAE,qBAAqB;WACG;SACnC,CAAC;0BAKgL;OAJrK,iBAAiB,CAwD7B;IAAD,CAAC;AAAA;SAxDY,iBAAiB,gB","file":"1.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { IonicPageModule } from 'ionic-angular';\nimport { ResetPasswordPage } from './reset-password';\n\n@NgModule({\n  declarations: [\n    ResetPasswordPage,\n  ],\n  imports: [\n    IonicPageModule.forChild(ResetPasswordPage),\n  ],\n})\nexport class ResetPasswordPageModule {}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/reset-password/reset-password.module.ts","import { FormControl } from '@angular/forms';\r\n\r\nexport class EmailValidator {\r\n    static isValid(control: FormControl) {\r\n        const ret = /^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$/\r\n            .test(\r\n            control.value\r\n            );\r\n        if (ret) {\r\n            return null;\r\n        }\r\n        return {\r\n            invalidEmail: true\r\n        };\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/validators/email.ts","import { Component } from '@angular/core';\nimport { IonicPage, NavController, Alert, AlertController, Loading, LoadingController } from 'ionic-angular';\nimport { FormGroup, FormBuilder } from '@angular/forms';\nimport { AuthProvider } from '../../providers/auth/auth';\nimport { EmailValidator } from '../../validators/email';\nimport { Validators } from '@angular/forms';\n\n\n@IonicPage()\n@Component({\n  selector: 'page-reset-password',\n  templateUrl: 'reset-password.html',\n})\nexport class ResetPasswordPage {\n  public resetPasswordForm: FormGroup;\n  public loading: Loading;\n\n  constructor(public navCtrl: NavController, public loadingCtrl: LoadingController, public alertCtrl: AlertController, public authProvider: AuthProvider, formBuilder: FormBuilder) {\n    this.resetPasswordForm = formBuilder.group({\n      email: [\n        '', Validators.compose([Validators.required, EmailValidator.isValid])\n      ]\n    });\n  }\n\n  ionViewDidLoad() {\n    console.log('ionViewDidLoad ResetPasswordPage');\n  }\n\n  resetPassword(): void {\n    if (!this.resetPasswordForm.valid) {\n      console.log(\n        `Form is not valid yet, current value: ${this.resetPasswordForm.value}`\n      );\n    } else {\n      const email: string = this.resetPasswordForm.value.email;\n\n      this.authProvider.resetPassword(email).then(user => {\n        this.loading.dismiss().then(() => {\n          const alert: Alert = this.alertCtrl.create({\n            message: \"Please check your email for a password reset link\",\n            buttons: [\n              {\n                text: \"Ok\",\n                role: \"cancel\",\n                handler: () => {\n                  this.navCtrl.pop();\n                }\n              }\n            ]\n          });\n\n          alert.present();\n        });\n      }, error => {\n        const errorAlert = this.alertCtrl.create({\n          message: error.message,\n          buttons: [{text: \"Ok\", role: \"cancel\"}]\n        });\n\n        this.loading.dismiss();\n        errorAlert.present();\n      });\n\n      this.loading = this.loadingCtrl.create();\n      this.loading.present();\n    }\n  }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/pages/reset-password/reset-password.ts"],"sourceRoot":""}